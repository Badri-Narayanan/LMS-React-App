import React, { useState, useEffect } from "react";
import {
  ChevronLeft,
  ChevronRight,
  Clock,
  CheckCircle,
  BarChart2,
  XCircle,
  Book,
  FileText,
  Archive,
  Info,
  Star,
} from "react-feather";

export default function QuizApplication() {
    const [questions] = useState([
      {
        id: 1,
        text: "How would you identify and exploit a Union-based SQL Injection vulnerability during a penetration test?",
        options: [
          "By using automated tools to scan for SQL injection vulnerabilities",
          "By manually crafting SQL queries to exploit the vulnerability",
          "By analyzing the application's source code for SQL injection points",
          "By performing a brute force attack on the database",
        ],
        answer: "By manually crafting SQL queries to exploit the vulnerability",
        explanation: "Identifying and exploiting a Union-based SQL Injection vulnerability requires careful examination of how user inputs are handled in the application and crafting specific SQL queries to exploit the vulnerability.",
        difficulty: "Hard",
        topic: "SQL Injection",
        points: 3,
      },
      {
        id: 2,
        text: "Can you explain the difference between a risk analysis and a penetration test?",
        options: [
          "Risk analysis identifies potential risks, while penetration testing uncovers vulnerabilities",
          "Risk analysis is more technical, while penetration testing is more practical",
          "Risk analysis focuses on impacts, while penetration testing focuses on technical details",
          "Risk analysis and penetration testing are the same",
        ],
        answer: "Risk analysis identifies potential risks, while penetration testing uncovers vulnerabilities",
        explanation: "Risk analysis is more practical, identifying potential risks and impacts, while penetration testing is more technical, going beneath the surface to uncover vulnerabilities.",
        difficulty: "Hard",
        topic: "Risk Management",
        points: 3,
      },
      {
        id: 3,
        text: "How do you approach packet sniffing in a penetration test, and what tools do you use?",
        options: [
          "By using Wireshark to capture and analyze network traffic",
          "By using tcpdump to capture packets on a network interface",
          "By using Netcat to listen for incoming connections",
          "By using Nmap to scan for open ports",
        ],
        answer: "By using Wireshark to capture and analyze network traffic",
        explanation: "Packet sniffing involves capturing and analyzing network traffic using tools like Wireshark to identify sensitive information or troubleshoot network issues.",
        difficulty: "Hard",
        topic: "Network Security",
        points: 3,
      },
      {
        id: 4,
        text: "Describe a scenario where you had to perform a complex privilege escalation. What steps did you take?",
        options: [
          "By exploiting a kernel vulnerability to gain root access",
          "By using a buffer overflow attack to execute arbitrary code",
          "By leveraging a misconfigured service to elevate privileges",
          "By brute-forcing administrative credentials",
        ],
        answer: "By exploiting a kernel vulnerability to gain root access",
        explanation: "Privilege escalation often involves exploiting vulnerabilities in the operating system or applications to gain higher-level access, such as root or administrative privileges.",
        difficulty: "Hard",
        topic: "Privilege Escalation",
        points: 3,
      },
      {
        id: 5,
        text: "How do you handle the discovery of a zero-day vulnerability during a penetration test?",
        options: [
          "By immediately disclosing it to the public",
          "By reporting it to the vendor and providing a proof of concept",
          "By selling the vulnerability to the highest bidder",
          "By ignoring the vulnerability and moving on",
        ],
        answer: "By reporting it to the vendor and providing a proof of concept",
        explanation: "Discovering a zero-day vulnerability requires responsible disclosure to the vendor to ensure it is patched before it can be exploited by malicious actors.",
        difficulty: "Hard",
        topic: "Vulnerability Disclosure",
        points: 3,
      },
      {
        id: 6,
        text: "Explain the process of conducting a thorough reconnaissance phase in a penetration test.",
        options: [
          "By gathering information about the target using open-source intelligence (OSINT)",
          "By scanning the target network for open ports and services",
          "By attempting to exploit vulnerabilities in the target system",
          "By performing social engineering attacks on the target's employees",
        ],
        answer: "By gathering information about the target using open-source intelligence (OSINT)",
        explanation: "Reconnaissance involves collecting information about the target system to identify potential entry points and vulnerabilities.",
        difficulty: "Hard",
        topic: "Reconnaissance",
        points: 3,
      },
      {
        id: 7,
        text: "How do you ensure that your penetration testing activities are legal and compliant with regulations?",
        options: [
          "By obtaining written permission from the target organization",
          "By following industry standards and best practices",
          "By adhering to the scope and rules of engagement defined in the contract",
          "By conducting tests only during off-hours to avoid detection",
        ],
        answer: "By obtaining written permission from the target organization",
        explanation: "Ensuring legal and compliant penetration testing activities requires obtaining explicit permission from the target organization and adhering to the defined scope and rules of engagement.",
        difficulty: "Hard",
        topic: "Legal Compliance",
        points: 3,
      },
      {
        id: 8,
        text: "Describe a situation where you had to bypass a Web Application Firewall (WAF). What techniques did you use?",
        options: [
          "By encoding payloads to evade detection",
          "By using automated tools to brute-force the WAF",
          "By exploiting vulnerabilities in the WAF itself",
          "By performing a denial-of-service attack on the WAF",
        ],
        answer: "By encoding payloads to evade detection",
        explanation: "Bypassing a WAF often involves encoding or obfuscating payloads to avoid detection by the firewall's rules and signatures.",
        difficulty: "Hard",
        topic: "Web Application Security",
        points: 3,
      },
      {
        id: 9,
        text: "How do you approach testing the security of a mobile application?",
        options: [
          "By analyzing the application's source code for vulnerabilities",
          "By intercepting and modifying network traffic using a proxy",
          "By performing static analysis on the application's binary",
          "By conducting phishing attacks on the application's users",
        ],
        answer: "By intercepting and modifying network traffic using a proxy",
        explanation: "Testing the security of a mobile application involves analyzing network traffic, examining the application's source code, and performing static and dynamic analysis.",
        difficulty: "Hard",
        topic: "Mobile Security",
        points: 3,
      },
      {
        id: 10,
        text: "Explain the concept of lateral movement in a network and how you would detect and prevent it.",
        options: [
          "By monitoring network traffic for suspicious activity",
          "By implementing strict access controls and segmentation",
          "By using intrusion detection systems (IDS) to alert on anomalous behavior",
          "By regularly scanning the network for open ports and services",
        ],
        answer: "By implementing strict access controls and segmentation",
        explanation: "Lateral movement involves an attacker moving within a network to gain access to additional systems. Detecting and preventing it requires monitoring network traffic, implementing access controls, and using IDS.",
        difficulty: "Hard",
        topic: "Network Security",
        points: 3,
      },
      {
        id: 11,
        text: "How do you conduct a social engineering attack as part of a penetration test?",
        options: [
          "By sending phishing emails to target employees",
          "By impersonating a trusted individual to gain access to sensitive information",
          "By exploiting physical security measures to gain access to restricted areas",
          "By using automated tools to brute-force login credentials",
        ],
        answer: "By sending phishing emails to target employees",
        explanation: "Social engineering attacks involve manipulating individuals to divulge sensitive information or perform actions that compromise security, often through phishing emails or impersonation.",
        difficulty: "Hard",
        topic: "Social Engineering",
        points: 3,
      },
      {
        id: 12,
        text: "Describe a scenario where you had to perform a complex data exfiltration. What methods did you use?",
        options: [
          "By encrypting data and exfiltrating it over DNS",
          "By using a covert channel to transfer data",
          "By compressing data and exfiltrating it over HTTP",
          "By using a USB drive to physically transfer data",
        ],
        answer: "By encrypting data and exfiltrating it over DNS",
        explanation: "Data exfiltration involves transferring data out of a compromised system using various methods, such as encrypting data and exfiltrating it over DNS or using covert channels.",
        difficulty: "Hard",
        topic: "Data Exfiltration",
        points: 3,
      },
      {
        id: 13,
        text: "How do you approach testing the security of IoT devices?",
        options: [
          "By analyzing the device's firmware for vulnerabilities",
          "By intercepting and modifying communication between the device and its server",
          "By performing physical attacks on the device",
          "By conducting denial-of-service attacks on the device",
        ],
        answer: "By analyzing the device's firmware for vulnerabilities",
        explanation: "Testing the security of IoT devices involves analyzing firmware, intercepting communication, and performing physical and network-based attacks.",
        difficulty: "Hard",
        topic: "IoT Security",
        points: 3,
      },
      {
        id: 14,
        text: "Explain the process of conducting a red team exercise. How does it differ from a traditional penetration test?",
        options: [
          "By simulating a real-world attack scenario to test the organization's defenses",
          "By focusing on identifying and exploiting vulnerabilities in a controlled environment",
          "By conducting the test with full knowledge of the target's defenses",
          "By using automated tools to scan for vulnerabilities",
        ],
        answer: "By simulating a real-world attack scenario to test the organization's defenses",
        explanation: "A red team exercise simulates a real-world attack scenario to test the organization's defenses, while a traditional penetration test focuses on identifying and exploiting vulnerabilities in a controlled environment.",
        difficulty: "Hard",
        topic: "Red Team Exercises",
        points: 3,
      },
      {
        id: 15,
        text: "How do you ensure the confidentiality and integrity of the data you handle during a penetration test?",
        options: [
          "By encrypting sensitive data before transferring it",
          "By using secure communication channels to transmit data",
          "By implementing strict access controls to limit data exposure",
          "By regularly backing up data to prevent loss",
        ],
        answer: "By encrypting sensitive data before transferring it",
        explanation: "Ensuring the confidentiality and integrity of data during a penetration test involves encrypting sensitive data, using secure communication channels, and implementing strict access controls.",
        difficulty: "Hard",
        topic: "Data Protection",
        points: 3,
      },
      {
        id: 16,
        text: "Describe a situation where you had to perform a complex phishing attack. What tools and techniques did you use?",
        options: [
          "By crafting convincing phishing emails using social engineering techniques",
          "By using automated tools to send mass phishing emails",
          "By exploiting vulnerabilities in email clients to deliver payloads",
          "By conducting spear-phishing attacks targeting specific individuals",
        ],
        answer: "By crafting convincing phishing emails using social engineering techniques",
        explanation: "Performing a complex phishing attack involves crafting convincing phishing emails using social engineering techniques to trick targets into divulging sensitive information.",
        difficulty: "Hard",
        topic: "Phishing Attacks",
        points: 3,
      },
      {
        id: 17,
        text: "How do you approach testing the security of cloud environments?",
        options: [
          "By analyzing the configuration of cloud services for vulnerabilities",
          "By performing network scans to identify open ports and services",
          "By testing the security of cloud-based applications",
          "By conducting physical security assessments of cloud data centers",
        ],
        answer: "By analyzing the configuration of cloud services for vulnerabilities",
        explanation: "Testing the security of cloud environments involves analyzing the configuration of cloud services, performing network scans, and testing the security of cloud-based applications.",
        difficulty: "Hard",
        topic: "Cloud Security",
        points: 3,
      },
      {
        id: 18,
        text: "Explain the concept of defense-in-depth and how you would implement it in a network.",
        options: [
          "By deploying multiple layers of security controls to protect against threats",
          "By relying on a single security control to protect the network",
          "By focusing on perimeter security to prevent external attacks",
          "By using only open-source security tools to protect the network",
        ],
        answer: "By deploying multiple layers of security controls to protect against threats",
        explanation: "Defense-in-depth involves deploying multiple layers of security controls, such as firewalls, intrusion detection systems, and access controls, to protect against various threats.",
        difficulty: "Hard",
        topic: "Network Security",
        points: 3,
      },
      {
        id: 19,
        text: "How do you conduct a thorough post-exploitation analysis?",
        options: [
          "By analyzing the impact of the exploit on the target system",
          "By identifying additional vulnerabilities that can be exploited",
          "By providing actionable recommendations to mitigate the exploited vulnerabilities",
          "By documenting the steps taken during the exploitation process",
        ],
        answer: "By providing actionable recommendations to mitigate the exploited vulnerabilities",
        explanation: "Post-exploitation analysis involves analyzing the impact of the exploit, identifying additional vulnerabilities, and providing actionable recommendations to mitigate the risks.",
        difficulty: "Hard",
        topic: "Post-Exploitation",
        points: 3,
      },
      {
        id: 20,
        text: "Describe a scenario where you had to perform a complex man-in-the-middle attack. What tools and techniques did you use?",
        options: [
          "By using ARP spoofing to intercept network traffic",
          "By deploying a rogue access point to capture wireless traffic",
          "By using SSL stripping to downgrade encrypted connections",
          "By conducting a DNS spoofing attack to redirect traffic",
        ],
        answer: "By using ARP spoofing to intercept network traffic",
        explanation: "Performing a complex man-in-the-middle attack involves using techniques such as ARP spoofing, deploying rogue access points, SSL stripping, or DNS spoofing to intercept and manipulate network traffic.",
        difficulty: "Hard",
        topic: "Man-in-the-Middle Attacks",
        points: 3,
      },
    ]);  
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedOption, setSelectedOption] = useState(null);
  const [score, setScore] = useState(0);
  const [finished, setFinished] = useState(false);
  const [answeredQuestions, setAnsweredQuestions] = useState(
    new Array(questions.length).fill(null)
  );
  const [detailedResults, setDetailedResults] = useState([]);
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const [reviewMode, setReviewMode] = useState(false);
  const [sidebarTab, setSidebarTab] = useState("overview");

  const [timeRemaining, setTimeRemaining] = useState(70 * 60);
  const [timerActive, setTimerActive] = useState(true);

  useEffect(() => {
    if (timerActive && timeRemaining > 0) {
      const timer = setTimeout(() => {
        setTimeRemaining((prevTime) => prevTime - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (timeRemaining === 0) {
      setFinished(true);
      setTimerActive(false);
    }
  }, [timeRemaining, timerActive]);

  const handleQuestionSelect = (index) => {
    if (finished || reviewMode) {
      setCurrentQuestion(index);
      setSelectedOption(
        detailedResults[index]?.selected || answeredQuestions[index]
      );
    } else {
      // Allow navigation during the quiz too
      setCurrentQuestion(index);
      setSelectedOption(answeredQuestions[index]);
    }
  };

  const handleNext = () => {
    const newAnsweredQuestions = [...answeredQuestions];
    newAnsweredQuestions[currentQuestion] = selectedOption;
    setAnsweredQuestions(newAnsweredQuestions);

    if (selectedOption === questions[currentQuestion].answer) {
      setScore((prevScore) => prevScore + questions[currentQuestion].points);
    }

    setDetailedResults([
      ...detailedResults,
      {
        question: questions[currentQuestion].text,
        selected: selectedOption,
        correct: questions[currentQuestion].answer,
        explanation: questions[currentQuestion].explanation,
        difficulty: questions[currentQuestion].difficulty,
        topic: questions[currentQuestion].topic,
        points: questions[currentQuestion].points,
        isCorrect: selectedOption === questions[currentQuestion].answer,
      },
    ]);

    if (currentQuestion + 1 < questions.length) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedOption(newAnsweredQuestions[currentQuestion + 1]);
    } else {
      setFinished(true);
      setTimerActive(false);
    }
  };

  const calculateProgress = () => {
    const answeredCount = answeredQuestions.filter(
      (answer) => answer !== null
    ).length;
    return (answeredCount / questions.length) * 100;
  };

  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds < 10 ? "0" : ""}${remainingSeconds}`;
  };

  const renderSidebarContent = () => {
    switch (sidebarTab) {
      case "overview":
        return (
          <div className="p-4 space-y-4">
            <div className="bg-blue-50 border-l-4 border-blue-500 p-3 rounded">
              <h3 className="font-semibold text-blue-800 flex items-center">
                <Info className="mr-2" size={20} />
                Quiz Overview
              </h3>
              <ul className="mt-2 text-sm text-blue-700">
                <li>Total Questions: {questions.length}</li>
                <li>
                  Total Points:{" "}
                  {questions.reduce((sum, q) => sum + q.points, 0)}
                </li>
                <li>Time Limit: 1 hour 10 minutes</li>
              </ul>
            </div>
            <div className="bg-green-50 border-l-4 border-green-500 p-3 rounded">
              <h3 className="font-semibold text-green-800 flex items-center">
                <Star className="mr-2" size={20} />
                Performance Targets
              </h3>
              <ul className="mt-2 text-sm text-green-700">
                <li>Pass Score: 60%</li>
                <li>Recommended: 80%+</li>
              </ul>
            </div>
          </div>
        );
      case "topics":
        return (
          <div className="p-4">
            <h3 className="font-semibold mb-3 text-gray-700 flex items-center">
              <Book className="mr-2" size={20} />
              Question Navigation
            </h3>
            <div className="grid grid-cols-3 gap-2">
              {questions.map((_, index) => {
                let buttonClass =
                  "w-full aspect-square rounded-lg text-center flex items-center justify-center font-bold transition-all duration-300 shadow-md cursor-pointer";

                if (finished || reviewMode) {
                  // In review mode, show answered/current state
                  if (currentQuestion === index) {
                    buttonClass += " bg-blue-600 text-white scale-105";
                  } else if (detailedResults[index]?.isCorrect) {
                    buttonClass += " bg-green-400 text-white";
                  } else if (detailedResults[index]) {
                    buttonClass += " bg-red-400 text-white";
                  } else {
                    buttonClass += " bg-gray-200 text-gray-600";
                  }
                } else {
                  // During the quiz
                  if (currentQuestion === index) {
                    buttonClass += " bg-blue-600 text-white scale-105";
                  } else if (answeredQuestions[index] !== null) {
                    buttonClass += " bg-blue-400 text-white";
                  } else {
                    buttonClass +=
                      " bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600";
                  }
                }

                return (
                  <div
                    key={index}
                    className={buttonClass}
                    onClick={() => handleQuestionSelect(index)}
                  >
                    {index + 1}
                  </div>
                );
              })}
            </div>
          </div>
        );
      case "results":
        return (
          <div className="p-4">
            <h3 className="font-semibold mb-3 text-gray-700 flex items-center">
              <FileText className="mr-2" size={20} />
              Detailed Results
            </h3>
            <div className="space-y-2">
              <div className="bg-green-50 p-2 rounded">
                <div className="flex justify-between">
                  <span className="text-sm text-green-800">
                    Correct Answers
                  </span>
                  <span className="font-bold text-green-800">
                    {detailedResults.filter((r) => r.isCorrect).length}/
                    {questions.length}
                  </span>
                </div>
              </div>
              <div className="bg-red-50 p-2 rounded">
                <div className="flex justify-between">
                  <span className="text-sm text-red-800">
                    Incorrect Answers
                  </span>
                  <span className="font-bold text-red-800">
                    {detailedResults.filter((r) => !r.isCorrect).length}/
                    {questions.length}
                  </span>
                </div>
              </div>
              <div className="bg-blue-50 p-2 rounded">
                <div className="flex justify-between">
                  <span className="text-sm text-blue-800">Total Score</span>
                  <span className="font-bold text-blue-800">
                    {score}/{questions.reduce((sum, q) => sum + q.points, 0)}
                  </span>
                </div>
              </div>
            </div>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-8 flex font-sans">
      {/* Sidebar */}
      <div
        className={`bg-white shadow-lg border-r rounded-lg transition-all duration-300 flex flex-col ${
          isSidebarCollapsed ? "w-16" : "w-64"
        }`}
      >
        <div className="p-4 flex justify-between items-center">
          <button
            onClick={() => setIsSidebarCollapsed(!isSidebarCollapsed)}
            className="text-gray-600 hover:text-blue-600 transition-colors"
          >
            {isSidebarCollapsed ? <ChevronRight /> : <ChevronLeft />}
          </button>

          {!isSidebarCollapsed && (
            <div className="flex items-center text-gray-700">
              <Clock className="mr-2 text-blue-500" size={20} />
              {formatTime(timeRemaining)}
            </div>
          )}
        </div>

        {!isSidebarCollapsed && (
          <div className="flex border-b">
            {[
              { icon: Info, tab: "overview" },
              { icon: Book, tab: "topics" },
              { icon: Archive, tab: "results" },
            ].map((item) => (
              <button
                key={item.tab}
                onClick={() => setSidebarTab(item.tab)}
                className={`flex-1 p-3 transition-colors ${
                  sidebarTab === item.tab
                    ? "bg-blue-50 text-blue-600 border-b-2 border-blue-500"
                    : "text-gray-500 hover:bg-gray-100"
                }`}
              >
                <item.icon size={20} className="mx-auto" />
              </button>
            ))}
          </div>
        )}

        <div className="flex-1 overflow-y-auto">
          {!isSidebarCollapsed && renderSidebarContent()}
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 max-w-3xl mx-auto bg-white rounded-xl shadow-2xl overflow-hidden border border-gray-200">
        <div className="p-6">
          {/* Progress Section */}
          <div className="mb-4 space-y-2">
            <div className="flex justify-between items-center">
              <span className="text-gray-600">Progress</span>
              <span className="text-gray-600">
                {calculateProgress().toFixed(0)}%
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2.5">
              <div
                className="bg-blue-600 h-2.5 rounded-full transition-all duration-500"
                style={{ width: `${calculateProgress()}%` }}
              ></div>
            </div>
          </div>

          {/* Review Mode button */}
          {finished && (
            <div className="flex justify-end mb-4">
              <button
                onClick={() => setReviewMode(!reviewMode)}
                className="flex items-center bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors"
              >
                <BarChart2 size={20} className="mr-2" />
                {reviewMode ? "Exit Review" : "Review Test"}
              </button>
            </div>
          )}

          {/* Quiz Content */}
          {!finished || reviewMode ? (
            <div>
              <h2 className="text-2xl font-bold text-gray-800 mb-4">
                Question {currentQuestion + 1}
              </h2>
              <p className="text-lg text-gray-700 mb-6">
                {questions[currentQuestion].text}
              </p>

              <div className="space-y-4">
                {questions[currentQuestion].options.map((option) => {
                  let buttonClass =
                    "w-full py-3 rounded-lg text-lg border transition-all";

                  if (reviewMode) {
                    if (option === questions[currentQuestion].answer) {
                      buttonClass +=
                        " bg-green-100 border-green-300 text-green-800";
                    }
                    if (
                      option === selectedOption &&
                      option !== questions[currentQuestion].answer
                    ) {
                      buttonClass += " bg-red-100 border-red-300 text-red-800";
                    }
                  } else {
                    buttonClass +=
                      selectedOption === option
                        ? " bg-blue-500 text-white"
                        : " bg-gray-100 hover:bg-gray-200 text-gray-800";
                  }

                  return (
                    <button
                      key={option}
                      onClick={() => !reviewMode && setSelectedOption(option)}
                      disabled={reviewMode}
                      className={buttonClass}
                    >
                      {option}
                      {reviewMode &&
                        option === questions[currentQuestion].answer && (
                          <CheckCircle
                            className="inline ml-2 text-green-600"
                            size={20}
                          />
                        )}
                      {reviewMode &&
                        option === selectedOption &&
                        option !== questions[currentQuestion].answer && (
                          <XCircle
                            className="inline ml-2 text-red-600"
                            size={20}
                          />
                        )}
                    </button>
                  );
                })}
              </div>

              {!reviewMode && (
                <button
                  onClick={handleNext}
                  disabled={!selectedOption}
                  className="w-full mt-6 py-3 rounded-lg bg-blue-500 text-white font-bold hover:bg-blue-600 disabled:bg-gray-300 transition-all"
                >
                  {currentQuestion + 1 === questions.length
                    ? "Finish Test"
                    : "Next Question"}
                </button>
              )}
            </div>
          ) : (
            <div>
              <h2 className="text-2xl font-bold mb-6 text-gray-800">
                Detailed Results
              </h2>
              {detailedResults.map((result, index) => (
                <div
                  key={index}
                  className={`mb-4 p-4 rounded-lg border-l-4 ${
                    result.isCorrect
                      ? "bg-green-50 border-green-500"
                      : "bg-red-50 border-red-500"
                  }`}
                >
                  <div className="flex justify-between items-center mb-2">
                    <p className="font-semibold text-gray-800">
                      Q{index + 1}: {result.question}
                    </p>
                    {result.isCorrect ? (
                      <CheckCircle className="text-green-600" size={20} />
                    ) : (
                      <XCircle className="text-red-600" size={20} />
                    )}
                  </div>
                  <p>
                    <strong>Your Answer: </strong>
                    {result.selected}
                  </p>
                  <p>
                    <strong>Correct Answer: </strong>
                    {result.correct}
                  </p>
                  <p>
                    <strong>Explanation: </strong>
                    {result.explanation}
                  </p>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
